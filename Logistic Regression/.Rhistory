install.packages("devtools")
library(devtools)
install_github("genomicsclass/dagdata")
library(devtools)
install_github("ririzarr/rafalib")
x = 1:10
setwd("~/Documents/MOOCS/edX/The Analytics Edge II/unit3")
songs = read.csv("songs.csv")
table(songs$year == 2010)
nrow(songs$year == 2010)
table(songs$year == 2010)
table(songs$artistname == "Michael Jackson")
MJSongs = subset(songs, artistname == "Michael Jackson")
MJSongs$songtitle
MJSongs = subset(songs, artistname == "Michael Jackson" & Top10 == 1)
MJSongs$songtitle
str(songs$timesignature)
summary(songs$timesignature)
unique(songs$timesignature)
hist(songs$timesignature)
songs$title[which.max(songs$tempo)]
which.max(songs$tempo)
songs[which.max(songs$tempo)]
songs$songtitle[which.max(songs$tempo)]
SongsTrain = subset(songs, year<=2009)
SongsTest = subset(songs, year>2009)
nrow(SongsTrain)
nonvars = c("year", "songtitle", "artistname", "songID", "artistID")
SongsTrain = SongsTrain[ , !(names(SongsTrain) %in% nonvars) ]
SongsTest = SongsTest[ , !(names(SongsTest) %in% nonvars) ]
Log1 = glm(Top10~., data=SongsTrain, family="binomial")
summary(Log1)
cor(loudness, energy)
cor(SongsTrain$loudness, SongsTrain$energy)
SongsLog2 = glm(Top10 ~ . - loudness, data=SongsTrain, family=binomial)
summary(SongsLog2)
SongsLog1 = glm(Top10~., data=SongsTrain, family="binomial")
summary(SongsLog2)
SongsLog3 = glm(Top10 ~ . - energy, data=SongsTrain, family=binomial)
summary(SongsLog3)
TestPred3 = predict(SongsLog3, type="response", newdata=SongsTest)
table(SongsTest$Top10, TestPred3>0.45)
table(SongsTest$Top10)
table(SongsTest$Top10, TestPred3>0.45)
sensitivity = 309+19/(309+19+5+40)
specificity = 309/(309+5)
sensitivity, specificity
specificity
sensitivity
sensitivity = 19/(19+40)
specificity = 309/(309+5)
sensitivity
specificity
parole = read.csv("parole.csv")
str(parole)
table(parole$violator)
?as.factor
parole$state = as.factor(parole$state)
parole$crime = as.factor(parole$crime)
```
parole$state = as.factor(parole$state)
parole$crime = as.factor(parole$crime)
summary(parole)
set.seed(144)
library(caTools)
split = sample.split(parole$violator, SplitRatio = 0.7)
train = subset(parole, split == TRUE)
test = subset(parole, split == FALSE)
paroleLog1 = glm(violator~., data = parole, family = "binomial")
summary(paroleLog1)
paroleLog1 = glm(violator~., data = train, family = "binomial")
summary(paroleLog1)
exp(4.2411574+0.3869904+0.8867192-50*0.0001756-3*0.1238867+12*0.0802954+0.6837143)
Odds = exp(4.2411574+0.3869904+0.8867192-50*0.0001756-3*0.1238867+12*0.0802954+0.6837143)
Odds
Odds = exp(logit)
Prob = 1/(1+exp(-logit))
logit = 4.2411574+0.3869904+0.8867192-50*0.0001756-3*0.1238867+12*0.0802954+0.6837143
Odds = exp(logit)
Prob = 1/(1+exp(-logit))
Prob
logit = -4.2411574+0.3869904+0.8867192-50*0.0001756-3*0.1238867+12*0.0802954+0.6837143
Odds = exp(logit)
Odds
Prob = 1/(1+exp(-logit))
Prob
testPred = predict(paroleLog1, tye="response", newdata = test)
summary(testPred)
testPred = predict(paroleLog1, type="response", newdata = test)
summary(testPred)
table(test$violator, testPred>0.5)
sens = 12/(12+11)
spec = 167/(167+12)
acc = (167+12)/nrow(test)
table(test$violator)
23/nrow(test)
179/nrow(test)
auc = as.numeric(performance(prediction(testPred, test$violator), "auc")@y.values)
library(ROCR)
auc = as.numeric(performance(prediction(testPred, test$violator), "auc")@y.values)
auc
loans = read.csv("loans.csv")
str(loans)
summary(loans)
loansNa = subset(loans, is.na(log.annual.inc)==TRUE)
table(loansNa$not.fully.paid)
loansNa = subset(loans, is.na(log.annual.inc)==TRUE | is.na(days.with.cr.line)==TRUE)
table(loansNa$not.fully.paid)
loansNa = subset(loans, is.na(log.annual.inc)==TRUE | is.na(days.with.cr.line)==TRUE | is.na(revol.util)==TRUE | is.na(inq.last.6mths)==TRUE | is.na(delinq.2yrs)==TRUE | is.na(pub.rec)==TRUE)
table(loansNa$not.fully.paid)
12/62
library(mice)
packages.install("mice")
install.packages("mice")
library(mice)
set.seed(144)
vars.for.imputation = setdiff(names(loans), "not.fully.paid")
imputed = complete(mice(loans[vars.for.imputation]))
loans[vars.for.imputation] = imputed
loans_imp = read.csv("loans_imputed.csv")
summary(loans_imp)
summary(loans)
# The imputation results differ so we'll use the loans_imputed dataset for the rest of the problems.
loans_imp = read.csv("loans_imputed.csv")
split = sample.split(loans_imp$not.fully.paid, SplitRatio = 0.7)
split = sample.split(loans_imp$not.fully.paid, SplitRatio = 0.7)
train = subset(loans_imp, split==TRUE)
test = subset(loans_imp, split==FALSE)
logLoans = glm(not.fully.paid ~ ., data=loans_imp, family="binomial")
summary(logLoans)
2.34*10*exp(-10)
exp(2.34*10*exp(-10))
exp(-2.34*10*exp(-10))
10*2.34*0.009002
exp(10*2.34*0.009002)
10*0.009002
exp(0.09002)
-9.002e-03
-700*9.002e-03 - (-710*9.002e-03)
logitDiff = -9.002e-03*(700-700)
logitDiff
logitDiff = -9.002e-03*(700-710)
logitDiff
library(caTools)
set.seed(144)
split = sample.split(loans_imp$not.fully.paid, SplitRatio = 0.7)
train = subset(loans_imp, split==TRUE)
test = subset(loans_imp, split==FALSE)
logLoans = glm(not.fully.paid ~ ., data=loans_imp, family="binomial")
summary(logLoans)
logLoans = glm(not.fully.paid ~ ., data=train, family="binomial")
summary(logLoans)
logitDiff = --9.317e-03*(700-710)
logitDiff
logitDiff = -9.317e-03*(700-710)
logitDiff
oddsRatio = exp(logitDiff)
oddsRatiodds
oddsRatio
predicted.risk = predict(logLoans, type="response", newdata = train)
table(test$not.fully.paid, predicted.risk>0.5)
predicted.risk = predict(logLoans, type="response", newdata = test)
table(test$not.fully.paid, predicted.risk>0.5)
2403/nrow(test)
table(test$not.fully.paid)
2413/nrow(test)
table(test$not.fully.paid)
2413/nrow(test)
auc = as.numeric(performance(prediction(predicted.risk, test$not.fully.paid),"auc")@y.values)
auc
bivLog = glm(not.fully.paid~int.rate, data=train, family="binomial")
summary(bivLog)
bivPred = predict(bivLog, type="response", newdata = test)
summary(bivPred)
auc = as.numeric(performance(prediction(bivLog, test$not.fully.paid),"auc")@y.values)
auc = as.numeric(performance(prediction(bivPred, test$not.fully.paid),"auc")@y.values)
auc
10*exp(0.06*3)
test$profit = exp(test$int.rate*3) - 1
test$profit[test$not.fully.paid == 1] = -1
summary(test$profit)
highInterest = subset(test, int.rate>=0.15)
summary(highInterest$profit)
summary(highInterest)
cutoff = sort(highInterest$predicted.risk, decreasing=FALSE)[100]
test$predicted.risk = predicted.risk
selectedLoans = subset(highInterest, highInterest$predicted.risk)
selectedLoans = subset(highInterest, highInterest$predicted.risk<100)
nrow(selectedLoans)
source('~/.active-rstudio-document', echo=TRUE)
selectedLoans = subset(highInterest, highInterest$predicted.risk<cutoff)
nrow(selectedLoans)
selectedLoans = subset(highInterest, highInterest$predicted.risk<=cutoff)
nrow(selectedLoans)
sum(selectedLoans$profit)
table(selectedLoans$not.fully.paid)
